initSidebarItems({"fn":[["debug_assert_unreachable","Act as `debug_assert!` in debug mode, asserting that this point is not reached."],["fix","Fixpoint combinator for rust closures, generalized over the return type."],["get_unchecked","Use `debug_assert!` to check indexing in debug mode. In release mode, no checks are done."],["get_unchecked_mut","Use `debug_assert!` to check indexing in debug mode. In release mode, no checks are done."],["ptr_eq","Compare if a and b are equal pointers."],["raw_byte_repr","Safe to use with any wholly initialized memory `ptr`"],["ref_eq","Compare if a and b are equal as pointers."],["ref_slice","Create a length 1 slice out of a reference"],["ref_slice_mut","Create a length 1 mutable slice out of a reference"],["slice_unchecked","Check slicing bounds in debug mode, otherwise just act as an unchecked slice call."],["slice_unchecked_mut","Check slicing bounds in debug mode, otherwise just act as an unchecked slice call."]],"mod":[["char","Extra functions for `char`"],["prelude","prelude of often used traits and functions"],["slice","Extra functions for slices"],["stride","Slice iterator with custom step size"],["string","Extensions to `&str` and `String`"]],"struct":[["Fix","Fixpoint combinator for rust closures, generalized over the return type."]],"trait":[["IndexRange","IndexRange is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`."]]});
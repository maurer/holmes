initSidebarItems({"fn":[["convert","Converts an `Iterator<Item = Result<T, E>>` into a `FallibleIterator<Item = T, Error = E>`."]],"struct":[["AndThen","An iterator which applies a fallible transform to the elements of the underlying iterator."],["Chain","An iterator which yields the elements of one iterator followed by another."],["Cloned","An iterator which clones the elements of the underlying iterator."],["Convert","A fallible iterator that wraps a normal iterator over `Result`s."],["Enumerate","An iterator that yields the iteration count as well as the values of the underlying iterator."],["Filter","An iterator which uses a predicate to determine which values of the underlying iterator should be yielded."],["FilterMap","An iterator which both filters and maps the values of the underlying iterator."],["Fuse","An iterator that yields `Ok(None)` forever after the underlying iterator yields `Ok(None)` once."],["Iterator","A normal (non-fallible) iterator which wraps a fallible iterator."],["Map","An iterator which applies a transform to the elements of the underlying iterator."],["MapErr","An iterator which applies a transform to the errors of the underlying iterator."],["Peekable","An iterator which can look at the next element without consuming it."],["Rev","An iterator which yields elements of the underlying iterator in reverse order."],["Take","An iterator which yields a limited number of elements from the underlying iterator."],["Zip","An iterator that yields pairs of this iterator's and another iterator's values."]],"trait":[["DoubleEndedFallibleIterator","A fallible iterator able to yield elements from both ends."],["FallibleIterator","An `Iterator`-like trait that allows for calculation of items to fail."],["FromFallibleIterator","Conversion from a fallible iterator."],["IntoFallibleIterator","Conversion into a `FallibleIterator`."]]});